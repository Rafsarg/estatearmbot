import os
import logging
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    if "—Ü–µ–Ω–∞" in text or "÷Ñ’¥" in text or "—Å—Ç–æ–∏–º–æ—Å—Ç—å" in text:
        await update.message.reply_text("1÷Ñ’¥-’´ ’°÷Ä’™’•÷Ñ’® 425,000 ’§÷Ä’°’¥ ’ß÷â")
    elif "–∏–ø–æ—Ç–µ–∫–∞" in text or "’∞’´÷É’∏’©’•÷Ñ" in text:
        await update.message.reply_text("‘±’µ’∏, ’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß ’•’Ø’°’¥’ø’°’∞’°÷Ä’Ø’´ ’æ’•÷Ä’°’§’°÷Ä’±’´ ÷Ö÷Ä’•’∂÷Ñ’®÷â")
    elif "–ø–ª–æ—â–∞–¥—å" in text or "÷Ñ’¥" in text:
        await update.message.reply_text("’Ñ’•’∂÷Ñ ’∏÷Ç’∂’•’∂÷Ñ ’¢’∂’°’Ø’°÷Ä’°’∂’∂’•÷Ä’ù 1 ’Ω’•’∂’µ’°’Ø’°’∂’∏÷Å (27÷Ñ’¥), 2 ’Ω’•’∂’µ’°’Ø’°’∂’∏÷Å (45÷Ñ’¥) ÷á 3 ’Ω’•’∂’µ’°’Ø’°’∂’∏÷Å (70÷Ñ’¥)÷â")
    elif "–Ω–æ–º–µ—Ä" in text or "’∞’•’º’°’≠’∏’Ω" in text:
        await update.message.reply_text("‘π’∏’≤’•÷Ñ ’±’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®’ù ’æ’°’≥’°’º÷Ñ’´ ’¥’°’Ω’∂’°’£’•’ø’® ’Ø’Ø’°’∫’æ’´ ’Å’•’¶ ’∞’•’ø÷â")
    else:
        await update.message.reply_text("’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂, ’∞’°÷Ä÷Å’® ÷É’∏’≠’°’∂÷Å’æ’•÷Å ’¥’°’Ω’∂’°’£’•’ø’´’∂÷â ‘ø’°÷Ä’∏’≤ ’•÷Ñ ’©’∏’≤’∂’•’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä üìû")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

    if not TELEGRAM_TOKEN:
        raise Exception("TELEGRAM_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ asyncio.run()
loop = asyncio.get_event_loop()
loop.create_task(main())
loop.run_forever()
